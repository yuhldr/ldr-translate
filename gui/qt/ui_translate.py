# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/yuh/code/test/pyqt/translate.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets

from api import tools, config, translate


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 360)
        MainWindow.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon/icon.svg"))
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.te_from = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.te_from.sizePolicy().hasHeightForWidth())
        self.te_from.setSizePolicy(sizePolicy)
        self.te_from.setObjectName("te_from")
        self.verticalLayout.addWidget(self.te_from)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.cbb_to = QtWidgets.QComboBox(self.centralwidget)
        self.cbb_to.setObjectName("cbb_to")
        self.horizontalLayout.addWidget(self.cbb_to)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(40, 20,
                                           QtWidgets.QSizePolicy.Expanding,
                                           QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.cb_add = QtWidgets.QCheckBox(self.centralwidget)
        self.cb_add.setObjectName("cb_add")
        self.horizontalLayout.addWidget(self.cb_add)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.te_to = QtWidgets.QTextEdit(self.centralwidget)
        self.te_to.setObjectName("te_to")
        self.verticalLayout.addWidget(self.te_to)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "兰译"))

        self.pushButton.setText(_translate("MainWindow", "翻译"))
        self.cb_add.setText(_translate("MainWindow", "追加模式"))
        zhs = config.get_translate_to_languages_zh()
        print(zhs)
        self.cbb_to.addItems(zhs)
        self.cbb_to.setCurrentText(tools.get_to_lang_zh())
        self.cbb_to.currentIndexChanged.connect(self.on_cbt_server_changed)

        self.te_to.setText(_translate("MainWindow", "选中“追加模式”后，累加翻译"))
        self.te_from.setText(
            _translate("MainWindow",
                       "复制自动翻译\n\n可以设置自己的api，使用开发者api,人数过多时，可能出现翻译失败等问题"))
        self.pushButton.clicked.connect(self.btnTranslate)

    def on_cbt_server_changed(self):
        st = self.cbb_to.currentText()
        print(st)
        tools.set_to_lang_zh(st)

        self.btnTranslate()

    def isAdd(self):
        add = self.cb_add.isChecked()
        print(add)
        return add

    def translate_text(self, text_from=None, text_to=None):
        text_from, text_to = translate.text(text_from, add_old=self.isAdd())
        self.te_from.setPlainText(text_from)
        self.te_to.setPlainText(text_to)

    def btnTranslate(self):
        text_from = self.te_from.toPlainText()
        text_to = self.te_to.toPlainText()
        self.translate_text(text_from, text_to)
